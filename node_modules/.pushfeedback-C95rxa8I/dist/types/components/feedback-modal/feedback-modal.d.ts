export declare class FeedbackModal {
  scrollTimeout: any;
  sending: boolean;
  formMessage: string;
  formEmail: string;
  formSuccess: boolean;
  formError: boolean;
  formErrorStatus: number;
  encodedScreenshot: string;
  isPrivacyChecked: boolean;
  whitelabel: boolean;
  selectedRating: number;
  errorMessage: string;
  errorMessage403: string;
  errorMessage404: string;
  modalTitle: string;
  modalTitleSuccess: string;
  modalTitleError: string;
  modalPosition: string;
  sendButtonText: string;
  successMessage: string;
  project: string;
  screenshotButtonText: string;
  screenshotTopbarText: string;
  hideEmail: boolean;
  emailAddress: string;
  emailPlaceholder: string;
  messagePlaceholder: string;
  hideRating: boolean;
  ratingMode: string;
  ratingPlaceholder: string;
  ratingStarsPlaceholder: string;
  showModal: boolean;
  showScreenshotMode: boolean;
  showScreenshotTopBar: boolean;
  hasSelectedElement: boolean;
  hideScreenshotButton: boolean;
  hidePrivacyPolicy: boolean;
  privacyPolicyText: string;
  fetchData: boolean;
  modalContent: HTMLElement;
  screenshotModal: HTMLElement;
  elementSelected: HTMLElement;
  topSide: HTMLElement;
  leftSide: HTMLElement;
  bottomSide: HTMLElement;
  rightSide: HTMLElement;
  componentWillLoad(): void;
  fetchProjectData(): Promise<void>;
  onScrollDebounced: () => void;
  resetOverflow(): void;
  handleMessageInput(event: Event): void;
  handleEmailInput(event: Event): void;
  handleSubmit: (event: Event) => Promise<void>;
  close: () => void;
  openScreenShot: () => void;
  closeScreenShot: () => void;
  handleMouseOverScreenShot: (event: any) => void;
  captureScreenshot(): Promise<unknown>;
  handleMouseClickedSelectedElement: (event: any) => Promise<void>;
  handleCheckboxChange(event: any): void;
  handleRatingChange(newRating: number): void;
  render(): any;
}
